header = T,
sep = "\t")
L2_3_markers <- L2_3_markers %>%
mutate(Gene = rownames(L2_3_markers), Type = "L2.3.IT")
marker_gene <- L2_3_markers
rm(L2_3_markers)
L5_IT_markers <- read.table("~/Desktop/Haber Lab/Seurat/scRNA-seq/MAST marker gene/L5 IT marker gene.txt",
header = T,
sep = "\t")
L5_IT_markers <- L5_IT_markers %>%
mutate(Gene = rownames(L5_IT_markers), Type = "L5.IT")
marker_gene <- rbind(marker_gene, L5_IT_markers)
rm(L5_IT_markers)
Meis_markers <- read.table("~/Desktop/Haber Lab/Seurat/scRNA-seq/MAST marker gene/Meis2 marker gene.txt",
header = T,
sep = "\t")
Meis_markers <- Meis_markers %>%
mutate(Gene = rownames(Meis_markers), Type = "Meis2")
marker_gene <- rbind(marker_gene, Meis_markers)
rm(Meis_markers)
L4_markers <- read.table("~/Desktop/Haber Lab/Seurat/scRNA-seq/MAST marker gene/L4 marker gene.txt",
header = T,
sep = "\t")
L4_markers <- L4_markers %>%
mutate(Gene = rownames(L4_markers), Type = "L4")
marker_gene <- rbind(marker_gene, L4_markers)
rm(L4_markers)
L6_IT_markers <- read.table("~/Desktop/Haber Lab/Seurat/scRNA-seq/MAST marker gene/L6 IT marker gene.txt",
header = T,
sep = "\t")
L6_IT_markers <- L6_IT_markers %>%
mutate(Gene = rownames(L6_IT_markers), Type = "L6.IT")
marker_gene <- rbind(marker_gene, L6_IT_markers)
rm(L6_IT_markers)
Oligo_markers <- read.table("~/Desktop/Haber Lab/Seurat/scRNA-seq/MAST marker gene/Oligo marker gene.txt",
header = T,
sep = "\t")
Oligo_markers <- Oligo_markers %>%
mutate(Gene = rownames(Oligo_markers), Type = "Oligo")
marker_gene <- rbind(marker_gene, Oligo_markers)
rm(Oligo_markers)
Pvalb_markers <- read.table("~/Desktop/Haber Lab/Seurat/scRNA-seq/MAST marker gene/Pvalb marker gene.txt",
header = T,
sep = "\t")
Pvalb_markers <- Pvalb_markers %>%
mutate(Gene = rownames(Pvalb_markers), Type = "Pvalb")
marker_gene <- rbind(marker_gene, Pvalb_markers)
rm(Pvalb_markers)
L6_CT_markers <- read.table("~/Desktop/Haber Lab/Seurat/scRNA-seq/MAST marker gene/L6 CT marker gene.txt",
header = T,
sep = "\t")
L6_CT_markers <- L6_CT_markers %>%
mutate(Gene = rownames(L6_CT_markers), Type = "L6.CT")
marker_gene <- rbind(marker_gene, L6_CT_markers)
rm(L6_CT_markers)
Sst_markers <- read.table("~/Desktop/Haber Lab/Seurat/scRNA-seq/MAST marker gene/Sst marker gene.txt",
header = T,
sep = "\t")
Sst_markers <- Sst_markers %>%
mutate(Gene = rownames(Sst_markers), Type = "Sst")
marker_gene <- rbind(marker_gene, Sst_markers)
rm(Sst_markers)
L6b_markers <- read.table("~/Desktop/Haber Lab/Seurat/scRNA-seq/MAST marker gene/L6b marker gene.txt",
header = T,
sep = "\t")
L6b_markers <- L6b_markers %>%
mutate(Gene = rownames(L6b_markers), Type = "L6b")
marker_gene <- rbind(marker_gene, L6b_markers)
rm(L6b_markers)
##  Select markers with adj_p_val < 1e-30
##    (due to the large number of cells, p_val is relatively small)
marker_gene <- marker_gene %>%
filter(p_val_adj < 1e-30) %>%
# filter(abs(avg_log2FC) >= 1)
filter(avg_log2FC >= 1)
round_spot_dist <- ceiling(spot_dist / 120) * 120
round_spot_dist[which(round_spot_dist > 1800)] <- 1800
# table(round_spot_dist)
dist_list <- (0:15)*120
rf_pair_cor_list <- readRDS("Data/rf_pair_cor_list_1800_ratio.rds")
linear_conv_r <- c(rep(1/5, 5), rep(0, 11))
linear_conv_p <- c(0, 0, rep(1/3, 3), rep(0, 11))
linear_conv_o <- c(rep(1/2, 2), 0,0,0, rep(0, 11))
pd_r <- sapply(rf_pair_cor_list, function(X){linear_conv_r %*% X})
pd_p <- sapply(rf_pair_cor_list, function(X){linear_conv_p %*% X})
pd_o <- sapply(rf_pair_cor_list, function(X){linear_conv_o %*% X})
rownames(pd_r) <- colnames(ST_expression)
rownames(pd_p) <- colnames(ST_expression)
rownames(pd_o) <- colnames(ST_expression)
plotMarkerPercent <- function(cell.type,
thershold,
cor.mat,
marker.gene.df){
cor.vec <- cor.mat[,cell.type]
names(cor.vec) <- rownames(cor.mat)
cor.vec <- cor.vec[cor.vec > thershold]
marker.gene.df <- marker.gene.df %>%
filter(Type == cell.type)
# res <- length(intersect(names(cor.vec), unique(marker.gene.df$Gene))) / length(cor.vec)
res <- length(intersect(names(cor.vec), unique(marker.gene.df$Gene)))
return(res)
}
# plotMarkerPercent("L2.3.IT", -1, res, marker_gene)
# sapply((0:10)/10, plotMarkerPercent,
#        cell.type = "L2.3.IT",
#        cor.mat = res,
#        marker.gene.df = marker_gene)
PC_df <- sapply(colnames(res), function(x){
sapply((0:10)/10, plotMarkerPercent,
cell.type = x,
cor.mat = res,
marker.gene.df = marker_gene)
}
)
# plotMarkerPercent("L2.3.IT", -1, res, marker_gene)
# sapply((0:10)/10, plotMarkerPercent,
#        cell.type = "L2.3.IT",
#        cor.mat = res,
#        marker.gene.df = marker_gene)
PC_df <- sapply(colnames(pd_r), function(x){
sapply((0:10)/10, plotMarkerPercent,
cell.type = x,
cor.mat = res,
marker.gene.df = marker_gene)
}
)
# plotMarkerPercent("L2.3.IT", -1, res, marker_gene)
# sapply((0:10)/10, plotMarkerPercent,
#        cell.type = "L2.3.IT",
#        cor.mat = res,
#        marker.gene.df = marker_gene)
PC_df <- sapply(colnames(pd_r), function(x){
sapply((0:10)/10, plotMarkerPercent,
cell.type = x,
cor.mat = pd_r,
marker.gene.df = marker_gene)
}
)
PC_df <- PC_df %>%
as.data.frame() %>%
gather(key = "Type", value = "Pos.Percent") %>%
mutate(Correlation = rep((0:10)/10, 10))
ggplot(data = PC_df, aes(x = Correlation, y = Pos.Percent, col = Type)) +
geom_line() +
labs(x = "Pair Distance", y = "Number of Marker Genes among SCGs") +
theme_bw()
res_df <- res %>%
t() %>%
as.data.frame() %>%
mutate(Type = colnames(pd_r)) %>%
gather(key = "Gene", value = "Correlation", -Type)
res_df <- pd_r %>%
t() %>%
as.data.frame() %>%
mutate(Type = colnames(pd_r)) %>%
gather(key = "Gene", value = "Correlation", -Type)
res_df <- res_df %>%
filter(Correlation > 0.2)
PC_gene <- sapply(colnames(KP_local$Z)[1:10],
spatialNonMarkerDetect,
corr_df = res_df,
marker_df = marker_gene,
method = "Pair_Correlation")
Venn_list <- list(
pos_marker = paste0(marker_gene$Gene[which(marker_gene$avg_log2FC > 0)],
marker_gene$Type[which(marker_gene$avg_log2FC > 0)]),
neg_marker = paste0(marker_gene$Gene[which(marker_gene$avg_log2FC < 0)],
marker_gene$Type[which(marker_gene$avg_log2FC < 0)]),
spatial_marker = paste0(res_df$Gene, res_df$Type)
)
names(Venn_list) <- c("Positive Marker", "Negative Marker", "Spatial Correlated Gene")
p <- ggvenn(Venn_list)
p
scRNA_data <- GetAssayData(allen_reference, assay = "SCT")
inter_gene_list <- intersect(rownames(scRNA_data),
rownames(Anterior@assays$SCT)[which(rowSums(Anterior@assays$SCT) > 40)])
# inter_gene_list <- intersect(rownames(scRNA_data)[which((rowSums(scRNA_data > 0) / ncol(scRNA_data)) > 0.05)],
#                              rownames(Anterior@assays$SCT)[which(rowSums(Anterior@assays$SCT) > 20)])
scRNA_data <- scRNA_data[inter_gene_list,]
cell_type_name <- c("L2/3 IT", "L5 IT", "Meis2", "L4", "L6 IT", "Oligo",
"Pvalb", "L6 CT", "Sst", "L6b")
mean_expr_matrix <- matrix(0, nrow = length(inter_gene_list), ncol = length(cell_type_name))
expr_frac_matrix <- matrix(0, nrow = length(inter_gene_list), ncol = length(cell_type_name))
for(i in 1:length(cell_type_name)){
cell_id <- which(allen_reference@meta.data$subclass == cell_type_name[i])
tmp <- as.vector(rowMeans(scRNA_data[,cell_id]))
mean_expr_matrix[,i] <- tmp
tmp <- as.vector(rowMeans(scRNA_data[,cell_id] != 0))
expr_frac_matrix[,i] <- tmp
}
colnames(mean_expr_matrix) <- colnames(pd_r)
rownames(mean_expr_matrix) <- inter_gene_list
colnames(expr_frac_matrix) <- colnames(pd_r)
rownames(expr_frac_matrix) <- inter_gene_list
rm(scRNA_data)
# pd_l_inter <- pd_l[inter_gene_list,]
pd_r_inter <- pd_r[inter_gene_list,]
pd_p_inter <- pd_p[inter_gene_list,]
pd_o_inter <- pd_o[inter_gene_list,]
res_tmp_p <- cor_mat_p[,inter_gene_list]
cor_mat <- stats::cor(KP_local$Z[,1:10], ST_expression, method = "spearman")
cor_mat_df <- cor_mat %>%
t() %>%
as.data.frame() %>%
mutate(Gene = colnames(cor_mat)) %>%
gather(key = "Type", value = "Correlation", -Gene)
cor_mat_p <- stats::cor(KP_local$Z[,1:10], ST_expression, method = "pearson")
cor_mat_p_df <- cor_mat_p %>%
t() %>%
as.data.frame() %>%
mutate(Gene = colnames(cor_mat)) %>%
gather(key = "Type", value = "Correlation", -Gene)
res_tmp_p <- cor_mat_p[,inter_gene_list]
res_tmp_s <- cor_mat[,inter_gene_list]
gene_id <- intersect(gene_id, inter_gene_list)
LRP_data <- LRP_data %>%
filter(gene1 %in% inter_gene_list)
##  Scatter Plots
total_marker_list <- c()
for(K in colnames(pd_r_inter)){
markers_label <- rownames(expr_frac_matrix) %in% marker_gene$Gene[which(marker_gene$Type == K)]
total_marker_list <- c(total_marker_list, markers_label)
tmp <- data.frame(Score_SPER = pd_r_inter[,K],
Score_Pearson = t(res_tmp_p)[,K],
Expr = expr_frac_matrix[,K],
Label = as.numeric(markers_label),
Gene_ID = rownames(pd_r_inter),
Cell_type = K)
if(K == colnames(pd_r_inter)[1]){scatter_df <- tmp}
else{scatter_df <- rbind(scatter_df, tmp)}
# p1 <- ggplot(data = NULL) +
#   geom_point(aes(x = pd_r_inter[,K],
#                   y = expr_frac_matrix[,K],
#                   col = markers_label,
#                   alpha = markers_label),
#              size = 1.5) +
#   geom_point(aes(x = pd_r_inter[markers_label, K],
#                  y = expr_frac_matrix[markers_label, K],
#                  col = markers_label[markers_label],
#                  alpha = markers_label[markers_label]),
#              size = 1.5) +
#   scale_color_manual(name = "Class",
#                      labels = c("Other", "Marker Gene"),
#                      values = c("gray", "darkblue")) +
#   scale_alpha_manual(values = c(0.2, 1)) +
#   labs(x = "SPER Score",
#        # y = "Mean Expression Level",
#        y = "Prevalence of Expression",
#        # title = paste0(K, " Pair Density")
#        ) +
#   guides(alpha = "none") +
#   theme_bw()
# p1 <- ggMarginal(p1, type = "density", margins = "x", groupColour = T)
# dir.create(paste0(plot_dir, "SPER_linear/"), showWarnings = F)
# ggsave(paste0(plot_dir, "SPER_linear/", K, "_SPER.pdf"), p1, width = 6.5, height = 4)
# p2 <- ggplot(data = NULL) +
#   geom_point(aes(x = pd_o_inter[,K],
#                   y = expr_frac_matrix[,K],
#                   col = markers_label,
#                   alpha = markers_label),
#              size = 1.5) +
#   geom_point(aes(x = pd_o_inter[markers_label, K],
#                  y = expr_frac_matrix[markers_label, K],
#                  col = markers_label[markers_label],
#                  alpha = markers_label[markers_label]),
#              size = 1.5) +
#   scale_color_manual(name = "Class",
#                      labels = c("Other", "Marker Gene"),
#                      values = c("gray", "darkblue")) +
#   scale_alpha_manual(values = c(0.2, 1)) +
#   labs(x = "Pair Density Score",
#        # y = "Mean Expression Level",
#        y = "Prevalence of Expression",
#        # title = paste0(K, " Pair Density")
#        ) +
#   guides(alpha = "none") +
#   theme_bw()
# p2 <- ggMarginal(p2, type = "density", margins = "x", groupColour = T)
# # ggsave("~/Desktop/sss.pdf", width = 6.5, height = 4.5)
# dir.create(paste0(plot_dir, "SPER_overlap/"), showWarnings = F)
# # ggsave(paste0(plot_dir, "SPER_overlap/", K, "_Pair_Density_Overlap.pdf"),
# #        p2, width = 6.5, height = 4)
#
# p3 <- ggplot(data = NULL) +
#   geom_point(aes(x = pd_p_inter[,K],
#                   y = expr_frac_matrix[,K],
#                   col = markers_label,
#                   alpha = markers_label),
#              size = 1.5) +
#   geom_point(aes(x = pd_p_inter[markers_label, K],
#                  y = expr_frac_matrix[markers_label, K],
#                  col = markers_label[markers_label],
#                  alpha = markers_label[markers_label]),
#              size = 1.5) +
#   scale_color_manual(name = "Class",
#                      labels = c("Other", "Marker Gene"),
#                      values = c("gray", "darkblue")) +
#   scale_alpha_manual(values = c(0.2, 1)) +
#   labs(x = "Pair Density Score",
#        # y = "Mean Expression Level",
#        y = "Prevalence of Expression",
#        # title = paste0(K, " Pair Density")
#        ) +
#   guides(alpha = "none") +
#   theme_bw()
# p3 <- ggMarginal(p3, type = "density", margins = "x", groupColour = T)
# # ggsave("~/Desktop/sss.pdf", width = 6.5, height = 4.5)
# dir.create(paste0(plot_dir, "SPER_paracrine/"), showWarnings = F)
# # ggsave(paste0(plot_dir, "SPER_paracrine/", K, "_Pair_Density_Paracrine.pdf"),
# #        p3, width = 6.5, height = 4)
#
# p4 <- ggplot(data = NULL) +
#   geom_point(aes(x = t(res_tmp_p)[,K],
#                   y = expr_frac_matrix[,K],
#                   col = markers_label,
#                   alpha = markers_label),
#              size = 1.5) +
#   geom_point(aes(x = t(res_tmp_p)[markers_label, K],
#                  y = expr_frac_matrix[markers_label, K],
#                  col = markers_label[markers_label],
#                  alpha = markers_label[markers_label]),
#              size = 1.5) +
#   scale_color_manual(name = "Class",
#                      labels = c("Other", "Marker Gene"),
#                      values = c("gray", "darkblue")) +
#   scale_alpha_manual(values = c(0.2, 1)) +
#   labs(x = "Pearson Correlation Score",
#        # y = "Mean Expression Level",
#        y = "Prevalence of Expression",
#        # title = paste0(K, " Pair Density")
#        ) +
#   guides(alpha = "none") +
#   theme_bw()
# p4 <- ggMarginal(p4, type = "density", margins = "x", groupColour = T)
# dir.create(paste0(plot_dir, "Pearson/"), showWarnings = F)
# ggsave(paste0(plot_dir, "Pearson/", K, "_Pearson_Cor.pdf"), p4, width = 6.5, height = 4)
}
quantile(pd_r_inter, 0.95)
quantile(pd_r_inter, 0.99)
dim(pd_r_inter)
SPER_spread <- pd_r_inter %>%
gather(key = "Cell_Type", value = "SPER_Score")
SPER_spread <- pd_r_inter %>%
as.data.frame() %>%
gather(key = "Cell_Type", value = "SPER_Score") %>%
filter(SPER_Score >= quantile(pd_r_inter, 0.99))
View(SPER_spread)
SPER_spread <- pd_r_inter %>%
mutate(Gene = rownames(pd_r_inter)) %>%
as.data.frame() %>%
gather(key = "Cell_Type", value = "SPER_Score", -Gene) %>%
filter(SPER_Score >= quantile(pd_r_inter, 0.99))
SPER_spread <- pd_r_inter %>%
as.data.frame() %>%
mutate(Gene = rownames(pd_r_inter)) %>%
gather(key = "Cell_Type", value = "SPER_Score", -Gene) %>%
filter(SPER_Score >= quantile(pd_r_inter, 0.99))
View(SPER_spread)
SPER_spread <- pd_r_inter %>%
as.data.frame() %>%
mutate(Gene = rownames(pd_r_inter)) %>%
gather(key = "Cell_Type", value = "SPER_Score", -Gene) %>%
filter(SPER_Score >= quantile(pd_r_inter, 0.99)) %>%
select(Gene)
write.table(SPER_spread, "~/Desktop/tmp.txt", row.names = F, col.names = F, quote = F, sep = "\t")
SPER_spread <- pd_r_inter %>%
as.data.frame() %>%
mutate(Gene = rownames(pd_r_inter)) %>%
gather(key = "Cell_Type", value = "SPER_Score", -Gene) %>%
filter(SPER_Score >= quantile(pd_r_inter, 0.99)) %>%
select(Gene) %>%
distinct()
View(SPER_spread)
dim(expr_frac_matrix)
Expr_spread <- expr_frac_matrix %>%
as.data.frame() %>%
mutate(Gene = rownames(pd_r_inter)) %>%
gather(key = "Cell_Type", value = "Expr_Score", -Gene)
SPER_spread <- pd_r_inter %>%
as.data.frame() %>%
mutate(Gene = rownames(pd_r_inter),
Expr_Score = Expr_spread$Expr_Score) %>%
gather(key = "Cell_Type", value = "SPER_Score", -Gene, -Expr_Score) %>%
filter(SPER_Score >= quantile(pd_r_inter, 0.99)) %>%
filter(Expr_Score <= 0.2) %>%
select(Gene) %>%
distinct()
dim(Expr_spread)
SPER_spread <- pd_r_inter %>%
as.data.frame() %>%
mutate(Gene = rownames(pd_r_inter) %>%
gather(key = "Cell_Type", value = "SPER_Score", -Gene, -Expr_Score) %>%
mutate(Expr_Score = Expr_spread$Expr_Score))
SPER_spread <- pd_r_inter %>%
as.data.frame() %>%
mutate(Gene = rownames(pd_r_inter) %>%
gather(key = "Cell_Type", value = "SPER_Score", -Gene, -Expr_Score) %>%
mutate(Expr_Score = Expr_spread$Expr_Score)) %>%
filter(SPER_Score >= quantile(pd_r_inter, 0.99)) %>%
filter(Expr_Score <= 0.2) %>%
select(Gene) %>%
distinct()
SPER_spread <- pd_r_inter %>%
as.data.frame() %>%
mutate(Gene = rownames(pd_r_inter) %>%
gather(key = "Cell_Type", value = "SPER_Score", -Gene) %>%
mutate(Expr_Score = Expr_spread$Expr_Score)) %>%
filter(SPER_Score >= quantile(pd_r_inter, 0.99)) %>%
filter(Expr_Score <= 0.2) %>%
select(Gene) %>%
distinct()
SPER_spread <- pd_r_inter %>%
as.data.frame() %>%
mutate(Gene = rownames(pd_r_inter)) %>%
gather(key = "Cell_Type", value = "SPER_Score", -Gene) %>%
mutate(Expr_Score = Expr_spread$Expr_Score)) %>%
SPER_spread <- pd_r_inter %>%
as.data.frame() %>%
mutate(Gene = rownames(pd_r_inter)) %>%
gather(key = "Cell_Type", value = "SPER_Score", -Gene) %>%
mutate(Expr_Score = Expr_spread$Expr_Score) %>%
filter(SPER_Score >= quantile(pd_r_inter, 0.99)) %>%
filter(Expr_Score <= 0.2) %>%
select(Gene) %>%
distinct()
SPER_spread
write.table(SPER_spread, "~/Desktop/tmp.txt", row.names = F, col.names = F, quote = F, sep = "\t")
Pearson_spread <- t(res_tmp_p) %>%
as.data.frame() %>%
mutate(Gene = rownames(pd_r_inter)) %>%
gather(key = "Cell_Type", value = "SPER_Score", -Gene) %>%
mutate(Expr_Score = Expr_spread$Expr_Score) %>%
filter(SPER_Score >= quantile(pd_r_inter, 0.99)) %>%
filter(Expr_Score <= 0.2) %>%
select(Gene) %>%
distinct()
write.table(Pearson_spread, "~/Desktop/tmp_Pearson.txt",
row.names = F, col.names = F, quote = F, sep = "\t")
Pearson_spread <- t(res_tmp_p) %>%
as.data.frame() %>%
mutate(Gene = rownames(pd_r_inter)) %>%
gather(key = "Cell_Type", value = "SPER_Score", -Gene) %>%
mutate(Expr_Score = Expr_spread$Expr_Score) %>%
filter(SPER_Score >= quantile(res_tmp_p, 0.99)) %>%
filter(Expr_Score <= 0.2) %>%
select(Gene) %>%
distinct()
write.table(Pearson_spread, "~/Desktop/tmp_Pearson.txt",
row.names = F, col.names = F, quote = F, sep = "\t")
Pearson_spread <- t(res_tmp_p) %>%
as.data.frame() %>%
mutate(Gene = rownames(pd_r_inter)) %>%
# gather(key = "Cell_Type", value = "SPER_Score", -Gene) %>%
# mutate(Expr_Score = Expr_spread$Expr_Score) %>%
# filter(SPER_Score >= quantile(res_tmp_p, 0.99)) %>%
# filter(Expr_Score <= 0.2) %>%
select(Gene) %>%
distinct()
write.table(Pearson_spread, "~/Desktop/KEGG_background.txt",
row.names = F, col.names = F, quote = F, sep = "\t")
devtools::create("SPER")
install.packages("devtools")
devtools::create("SPER")
install.packages("roxygen2")
install.packages("roxygen2")
devtools::document()
setwd("~/Dropbox/cell_comp_spatial/analysis/Spatial/SPER/R/")
devtools::document()
library(SPER)
probalized(1:10)
probalized(rep(1, 10))
??probalized
library(probalized)
library(SPER)
library("SPER")
is.data.frame(1:10)
!is.data.frame(1:10)
grep("txt", list.files("~/Dropbox/cell_comp_spatial/analysis/Spatial/Data/"))
grep(".txt", list.files("~/Dropbox/cell_comp_spatial/analysis/Spatial/Data/"))
list.files("~/Dropbox/cell_comp_spatial/analysis/Spatial/Data/")
grep("*.txt", list.files("~/Dropbox/cell_comp_spatial/analysis/Spatial/Data/"))
grep("txt", list.files("~/Dropbox/cell_comp_spatial/analysis/Spatial/Data/"), fixed = T)
ll grep("txt", list.files("~/Dropbox/cell_comp_spatial/analysis/Spatial/Data/"))
ll <- grep("txt", list.files("~/Dropbox/cell_comp_spatial/analysis/Spatial/Data/"))
rm(ll)
devtools::document()
devtools::document()
usethis::use_package("ggplot2")
usethis::use_package("ggplot2")
devtools::document()
warnings()
devtools::document()
usethis::use_package("dplyr")
usethis::use_package("ggplot2")
devtools::check()
devtools::check()
usethis::use_package(stats)
usethis::use_package('stats')
usethis::use_package('grDevices')
devtools::check()
devtools::check()
usethis::use_package("Seurat")
devtools::check()
devtools::check()
tools:::.check_package_license()
devtools:::.check_package_license()
devtools::document()
remove.packages("SPER")
devtools::install_github("tsinghua-ZTX/SPER")
library(SPER)
??SPER
gg_gene()
